// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vultr
{
    /// <summary>
    /// Provides a Vultr reserved IP resource. This can be used to create, read, modify, and delete reserved IP addresses on your Vultr account.
    /// </summary>
    public partial class ReservedIP : Pulumi.CustomResource
    {
        /// <summary>
        /// The VPS ID you want this reserved IP to be attached to.
        /// </summary>
        [Output("attachedId")]
        public Output<string> AttachedId { get; private set; } = null!;

        /// <summary>
        /// The type of reserved IP that you want. Either "v4" or "v6".
        /// </summary>
        [Output("ipType")]
        public Output<string> IpType { get; private set; } = null!;

        /// <summary>
        /// The label you want to give your reserved IP.
        /// </summary>
        [Output("label")]
        public Output<string?> Label { get; private set; } = null!;

        /// <summary>
        /// The region ID that you want the reserved IP to be created in.
        /// </summary>
        [Output("regionId")]
        public Output<int> RegionId { get; private set; } = null!;

        /// <summary>
        /// The reserved IP's subnet.
        /// </summary>
        [Output("subnet")]
        public Output<string> Subnet { get; private set; } = null!;

        /// <summary>
        /// The reserved IP's subnet size.
        /// </summary>
        [Output("subnetSize")]
        public Output<int> SubnetSize { get; private set; } = null!;


        /// <summary>
        /// Create a ReservedIP resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReservedIP(string name, ReservedIPArgs args, CustomResourceOptions? options = null)
            : base("vultr:index/reservedIP:ReservedIP", name, args ?? new ReservedIPArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReservedIP(string name, Input<string> id, ReservedIPState? state = null, CustomResourceOptions? options = null)
            : base("vultr:index/reservedIP:ReservedIP", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReservedIP resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReservedIP Get(string name, Input<string> id, ReservedIPState? state = null, CustomResourceOptions? options = null)
        {
            return new ReservedIP(name, id, state, options);
        }
    }

    public sealed class ReservedIPArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The VPS ID you want this reserved IP to be attached to.
        /// </summary>
        [Input("attachedId")]
        public Input<string>? AttachedId { get; set; }

        /// <summary>
        /// The type of reserved IP that you want. Either "v4" or "v6".
        /// </summary>
        [Input("ipType", required: true)]
        public Input<string> IpType { get; set; } = null!;

        /// <summary>
        /// The label you want to give your reserved IP.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// The region ID that you want the reserved IP to be created in.
        /// </summary>
        [Input("regionId", required: true)]
        public Input<int> RegionId { get; set; } = null!;

        public ReservedIPArgs()
        {
        }
    }

    public sealed class ReservedIPState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The VPS ID you want this reserved IP to be attached to.
        /// </summary>
        [Input("attachedId")]
        public Input<string>? AttachedId { get; set; }

        /// <summary>
        /// The type of reserved IP that you want. Either "v4" or "v6".
        /// </summary>
        [Input("ipType")]
        public Input<string>? IpType { get; set; }

        /// <summary>
        /// The label you want to give your reserved IP.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// The region ID that you want the reserved IP to be created in.
        /// </summary>
        [Input("regionId")]
        public Input<int>? RegionId { get; set; }

        /// <summary>
        /// The reserved IP's subnet.
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        /// <summary>
        /// The reserved IP's subnet size.
        /// </summary>
        [Input("subnetSize")]
        public Input<int>? SubnetSize { get; set; }

        public ReservedIPState()
        {
        }
    }
}
