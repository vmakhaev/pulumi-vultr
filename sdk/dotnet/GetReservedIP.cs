// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vultr
{
    public static class GetReservedIP
    {
        /// <summary>
        /// Get information about a Vultr reserved IP address.
        /// 
        /// {{% examples %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetReservedIPResult> InvokeAsync(GetReservedIPArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetReservedIPResult>("vultr:index/getReservedIP:getReservedIP", args ?? new GetReservedIPArgs(), options.WithVersion());
    }


    public sealed class GetReservedIPArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetReservedIPFilterArgs>? _filters;

        /// <summary>
        /// Query parameters for finding reserved IP addresses.
        /// </summary>
        public List<Inputs.GetReservedIPFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetReservedIPFilterArgs>());
            set => _filters = value;
        }

        public GetReservedIPArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetReservedIPResult
    {
        /// <summary>
        /// The ID of the VPS the reserved IP is attached to.
        /// </summary>
        public readonly string AttachedToVps;
        public readonly ImmutableArray<Outputs.GetReservedIPFilterResult> Filters;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The IP type of the reserved IP.
        /// </summary>
        public readonly string IpType;
        /// <summary>
        /// The label of the reserved IP.
        /// </summary>
        public readonly string Label;
        /// <summary>
        /// The ID of the region that the reserved IP is in.
        /// </summary>
        public readonly int RegionId;
        /// <summary>
        /// The subnet of the reserved IP.
        /// </summary>
        public readonly string Subnet;
        /// <summary>
        /// The subnet size of the reserved IP.
        /// </summary>
        public readonly int SubnetSize;

        [OutputConstructor]
        private GetReservedIPResult(
            string attachedToVps,

            ImmutableArray<Outputs.GetReservedIPFilterResult> filters,

            string id,

            string ipType,

            string label,

            int regionId,

            string subnet,

            int subnetSize)
        {
            AttachedToVps = attachedToVps;
            Filters = filters;
            Id = id;
            IpType = ipType;
            Label = label;
            RegionId = regionId;
            Subnet = subnet;
            SubnetSize = subnetSize;
        }
    }
}
