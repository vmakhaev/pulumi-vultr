// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vultr
{
    public static class GetBareMetalServer
    {
        /// <summary>
        /// Get information about a Vultr bare metal server.
        /// 
        /// {{% examples %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetBareMetalServerResult> InvokeAsync(GetBareMetalServerArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBareMetalServerResult>("vultr:index/getBareMetalServer:getBareMetalServer", args ?? new GetBareMetalServerArgs(), options.WithVersion());
    }


    public sealed class GetBareMetalServerArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetBareMetalServerFilterArgs>? _filters;

        /// <summary>
        /// Query parameters for finding servers.
        /// </summary>
        public List<Inputs.GetBareMetalServerFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetBareMetalServerFilterArgs>());
            set => _filters = value;
        }

        public GetBareMetalServerArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetBareMetalServerResult
    {
        /// <summary>
        /// The server's application ID.
        /// </summary>
        public readonly string AppId;
        /// <summary>
        /// The number of CPUs available on the server.
        /// </summary>
        public readonly int CpuCount;
        /// <summary>
        /// The date the server was added to your Vultr account.
        /// </summary>
        public readonly string DateCreated;
        /// <summary>
        /// The server's default password.
        /// </summary>
        public readonly string DefaultPassword;
        /// <summary>
        /// The description of the disk(s) on the server.
        /// </summary>
        public readonly string Disk;
        public readonly ImmutableArray<Outputs.GetBareMetalServerFilterResult> Filters;
        /// <summary>
        /// The server's IPv4 gateway.
        /// </summary>
        public readonly string GatewayV4;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The server's label.
        /// </summary>
        public readonly string Label;
        /// <summary>
        /// The location of the server.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The server's main IP address.
        /// </summary>
        public readonly string MainIp;
        /// <summary>
        /// The server's IPv4 netmask.
        /// </summary>
        public readonly string NetmaskV4;
        /// <summary>
        /// The operating system of the server.
        /// </summary>
        public readonly string Os;
        /// <summary>
        /// The server's operating system ID.
        /// </summary>
        public readonly string OsId;
        /// <summary>
        /// The server's plan ID.
        /// </summary>
        public readonly int PlanId;
        /// <summary>
        /// The amount of memory available on the server in MB.
        /// </summary>
        public readonly string Ram;
        /// <summary>
        /// The region ID (`DCID` in the Vultr API) of the server.
        /// </summary>
        public readonly int RegionId;
        /// <summary>
        /// The status of the server's subscription.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The server's tag.
        /// </summary>
        public readonly string Tag;
        /// <summary>
        /// A list of the server's IPv6 networks.
        /// </summary>
        public readonly ImmutableArray<ImmutableDictionary<string, object>> V6Networks;

        [OutputConstructor]
        private GetBareMetalServerResult(
            string appId,

            int cpuCount,

            string dateCreated,

            string defaultPassword,

            string disk,

            ImmutableArray<Outputs.GetBareMetalServerFilterResult> filters,

            string gatewayV4,

            string id,

            string label,

            string location,

            string mainIp,

            string netmaskV4,

            string os,

            string osId,

            int planId,

            string ram,

            int regionId,

            string status,

            string tag,

            ImmutableArray<ImmutableDictionary<string, object>> v6Networks)
        {
            AppId = appId;
            CpuCount = cpuCount;
            DateCreated = dateCreated;
            DefaultPassword = defaultPassword;
            Disk = disk;
            Filters = filters;
            GatewayV4 = gatewayV4;
            Id = id;
            Label = label;
            Location = location;
            MainIp = mainIp;
            NetmaskV4 = netmaskV4;
            Os = os;
            OsId = osId;
            PlanId = planId;
            Ram = ram;
            RegionId = regionId;
            Status = status;
            Tag = tag;
            V6Networks = v6Networks;
        }
    }
}
