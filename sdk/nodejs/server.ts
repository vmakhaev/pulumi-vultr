// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Vultr server resource. This can be used to create, read, modify, and delete servers on your Vultr account.
 * 
 * ## Example Usage
 * 
 * 
 * 
 * ```typescript
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-vultr/blob/master/website/docs/r/server.html.markdown.
 */
export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vultr:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * The server's allowed bandwidth usage in GB.
     */
    public /*out*/ readonly allowedBandwidth!: pulumi.Output<string>;
    /**
     * The ID of the Vultr application to be installed on the server.
     */
    public readonly appId!: pulumi.Output<number>;
    /**
     * Whether automatic backups will be enabled for this server (these have an extra charge associated with them).
     */
    public readonly autoBackup!: pulumi.Output<boolean>;
    /**
     * The server's cost per month in USD.
     */
    public /*out*/ readonly costPerMonth!: pulumi.Output<string>;
    /**
     * The server's current bandwidth usage in GB.
     */
    public /*out*/ readonly currentBandwidth!: pulumi.Output<number>;
    /**
     * The date the server was added to your Vultr account.
     */
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    /**
     * Whether DDOS protection will be enabled on the server (there is an additional charge for this).
     */
    public readonly ddosProtection!: pulumi.Output<boolean>;
    /**
     * The server's default password.
     */
    public /*out*/ readonly defaultPassword!: pulumi.Output<string>;
    /**
     * The description of the disk(s) on the server.
     */
    public /*out*/ readonly disk!: pulumi.Output<string>;
    /**
     * Whether the server has IPv6 networking activated.
     */
    public readonly enableIpv6!: pulumi.Output<boolean>;
    /**
     * Whether the server has private networking support enabled.
     */
    public readonly enablePrivateNetwork!: pulumi.Output<boolean>;
    /**
     * The ID of the firewall group to assign to the server.
     */
    public readonly firewallGroupId!: pulumi.Output<string>;
    /**
     * The server's IPv4 gateway.
     */
    public /*out*/ readonly gatewayV4!: pulumi.Output<string>;
    /**
     * The hostname to assign to the server.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * The server's internal IP address.
     */
    public /*out*/ readonly internalIp!: pulumi.Output<string>;
    /**
     * The ID of the ISO file to be installed on the server.
     */
    public readonly isoId!: pulumi.Output<number>;
    /**
     * The server's current KVM URL. This URL will change periodically. It is not advised to cache this value.
     */
    public /*out*/ readonly kvmUrl!: pulumi.Output<string>;
    /**
     * A label for the server.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * The physical location of the server.
     */
    public /*out*/ readonly location!: pulumi.Output<string>;
    /**
     * The server's main IP address.
     */
    public /*out*/ readonly mainIp!: pulumi.Output<string>;
    /**
     * The server's IPv4 netmask.
     */
    public /*out*/ readonly netmaskV4!: pulumi.Output<string>;
    /**
     * A list of private network IDs to be attached to the server.
     */
    public readonly networkIds!: pulumi.Output<string[]>;
    public /*out*/ readonly networkIps!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly networkMacs!: pulumi.Output<{[key: string]: string}>;
    /**
     * Whether an activation email will be sent when the server is ready.
     */
    public readonly notifyActivate!: pulumi.Output<boolean>;
    /**
     * The string description of the operating system installed on the server.
     */
    public /*out*/ readonly os!: pulumi.Output<string>;
    /**
     * The ID of the operating system to be installed on the server.
     */
    public readonly osId!: pulumi.Output<number>;
    /**
     * Charges pending for this server's subscription in USD.
     */
    public /*out*/ readonly pendingCharges!: pulumi.Output<string>;
    /**
     * The ID of the plan that you want the server to subscribe to.
     */
    public readonly planId!: pulumi.Output<number>;
    /**
     * Whether the server is powered on or not.
     */
    public /*out*/ readonly powerStatus!: pulumi.Output<string>;
    /**
     * The amount of memory available on the server in MB.
     */
    public /*out*/ readonly ram!: pulumi.Output<string>;
    /**
     * The ID of the region that the server is to be created in.
     */
    public readonly regionId!: pulumi.Output<number>;
    /**
     * IP address of the floating IP to use as the main IP of this server.
     */
    public readonly reservedIp!: pulumi.Output<string>;
    /**
     * The ID of the startup script you want added to the server.
     */
    public readonly scriptId!: pulumi.Output<string>;
    /**
     * A more detailed server status (none, locked, installingbooting, isomounting, ok).
     */
    public /*out*/ readonly serverState!: pulumi.Output<string>;
    /**
     * The ID of the Vultr snapshot that the server will restore for the initial installation. 
     */
    public readonly snapshotId!: pulumi.Output<string>;
    /**
     * A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).
     */
    public readonly sshKeyIds!: pulumi.Output<string[] | undefined>;
    /**
     * The status of the server's subscription.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The tag to assign to the server.
     */
    public readonly tag!: pulumi.Output<string>;
    /**
     * Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.
     */
    public readonly userData!: pulumi.Output<string>;
    /**
     * A list of the server's IPv6 networks.
     */
    public /*out*/ readonly v6Networks!: pulumi.Output<{[key: string]: any}[]>;
    /**
     * The number of virtual CPUs available on the server.
     */
    public /*out*/ readonly vpsCpuCount!: pulumi.Output<string>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ServerState | undefined;
            inputs["allowedBandwidth"] = state ? state.allowedBandwidth : undefined;
            inputs["appId"] = state ? state.appId : undefined;
            inputs["autoBackup"] = state ? state.autoBackup : undefined;
            inputs["costPerMonth"] = state ? state.costPerMonth : undefined;
            inputs["currentBandwidth"] = state ? state.currentBandwidth : undefined;
            inputs["dateCreated"] = state ? state.dateCreated : undefined;
            inputs["ddosProtection"] = state ? state.ddosProtection : undefined;
            inputs["defaultPassword"] = state ? state.defaultPassword : undefined;
            inputs["disk"] = state ? state.disk : undefined;
            inputs["enableIpv6"] = state ? state.enableIpv6 : undefined;
            inputs["enablePrivateNetwork"] = state ? state.enablePrivateNetwork : undefined;
            inputs["firewallGroupId"] = state ? state.firewallGroupId : undefined;
            inputs["gatewayV4"] = state ? state.gatewayV4 : undefined;
            inputs["hostname"] = state ? state.hostname : undefined;
            inputs["internalIp"] = state ? state.internalIp : undefined;
            inputs["isoId"] = state ? state.isoId : undefined;
            inputs["kvmUrl"] = state ? state.kvmUrl : undefined;
            inputs["label"] = state ? state.label : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["mainIp"] = state ? state.mainIp : undefined;
            inputs["netmaskV4"] = state ? state.netmaskV4 : undefined;
            inputs["networkIds"] = state ? state.networkIds : undefined;
            inputs["networkIps"] = state ? state.networkIps : undefined;
            inputs["networkMacs"] = state ? state.networkMacs : undefined;
            inputs["notifyActivate"] = state ? state.notifyActivate : undefined;
            inputs["os"] = state ? state.os : undefined;
            inputs["osId"] = state ? state.osId : undefined;
            inputs["pendingCharges"] = state ? state.pendingCharges : undefined;
            inputs["planId"] = state ? state.planId : undefined;
            inputs["powerStatus"] = state ? state.powerStatus : undefined;
            inputs["ram"] = state ? state.ram : undefined;
            inputs["regionId"] = state ? state.regionId : undefined;
            inputs["reservedIp"] = state ? state.reservedIp : undefined;
            inputs["scriptId"] = state ? state.scriptId : undefined;
            inputs["serverState"] = state ? state.serverState : undefined;
            inputs["snapshotId"] = state ? state.snapshotId : undefined;
            inputs["sshKeyIds"] = state ? state.sshKeyIds : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tag"] = state ? state.tag : undefined;
            inputs["userData"] = state ? state.userData : undefined;
            inputs["v6Networks"] = state ? state.v6Networks : undefined;
            inputs["vpsCpuCount"] = state ? state.vpsCpuCount : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if (!args || args.planId === undefined) {
                throw new Error("Missing required property 'planId'");
            }
            if (!args || args.regionId === undefined) {
                throw new Error("Missing required property 'regionId'");
            }
            inputs["appId"] = args ? args.appId : undefined;
            inputs["autoBackup"] = args ? args.autoBackup : undefined;
            inputs["ddosProtection"] = args ? args.ddosProtection : undefined;
            inputs["enableIpv6"] = args ? args.enableIpv6 : undefined;
            inputs["enablePrivateNetwork"] = args ? args.enablePrivateNetwork : undefined;
            inputs["firewallGroupId"] = args ? args.firewallGroupId : undefined;
            inputs["hostname"] = args ? args.hostname : undefined;
            inputs["isoId"] = args ? args.isoId : undefined;
            inputs["label"] = args ? args.label : undefined;
            inputs["networkIds"] = args ? args.networkIds : undefined;
            inputs["notifyActivate"] = args ? args.notifyActivate : undefined;
            inputs["osId"] = args ? args.osId : undefined;
            inputs["planId"] = args ? args.planId : undefined;
            inputs["regionId"] = args ? args.regionId : undefined;
            inputs["reservedIp"] = args ? args.reservedIp : undefined;
            inputs["scriptId"] = args ? args.scriptId : undefined;
            inputs["snapshotId"] = args ? args.snapshotId : undefined;
            inputs["sshKeyIds"] = args ? args.sshKeyIds : undefined;
            inputs["tag"] = args ? args.tag : undefined;
            inputs["userData"] = args ? args.userData : undefined;
            inputs["allowedBandwidth"] = undefined /*out*/;
            inputs["costPerMonth"] = undefined /*out*/;
            inputs["currentBandwidth"] = undefined /*out*/;
            inputs["dateCreated"] = undefined /*out*/;
            inputs["defaultPassword"] = undefined /*out*/;
            inputs["disk"] = undefined /*out*/;
            inputs["gatewayV4"] = undefined /*out*/;
            inputs["internalIp"] = undefined /*out*/;
            inputs["kvmUrl"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["mainIp"] = undefined /*out*/;
            inputs["netmaskV4"] = undefined /*out*/;
            inputs["networkIps"] = undefined /*out*/;
            inputs["networkMacs"] = undefined /*out*/;
            inputs["os"] = undefined /*out*/;
            inputs["pendingCharges"] = undefined /*out*/;
            inputs["powerStatus"] = undefined /*out*/;
            inputs["ram"] = undefined /*out*/;
            inputs["serverState"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["v6Networks"] = undefined /*out*/;
            inputs["vpsCpuCount"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Server.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * The server's allowed bandwidth usage in GB.
     */
    readonly allowedBandwidth?: pulumi.Input<string>;
    /**
     * The ID of the Vultr application to be installed on the server.
     */
    readonly appId?: pulumi.Input<number>;
    /**
     * Whether automatic backups will be enabled for this server (these have an extra charge associated with them).
     */
    readonly autoBackup?: pulumi.Input<boolean>;
    /**
     * The server's cost per month in USD.
     */
    readonly costPerMonth?: pulumi.Input<string>;
    /**
     * The server's current bandwidth usage in GB.
     */
    readonly currentBandwidth?: pulumi.Input<number>;
    /**
     * The date the server was added to your Vultr account.
     */
    readonly dateCreated?: pulumi.Input<string>;
    /**
     * Whether DDOS protection will be enabled on the server (there is an additional charge for this).
     */
    readonly ddosProtection?: pulumi.Input<boolean>;
    /**
     * The server's default password.
     */
    readonly defaultPassword?: pulumi.Input<string>;
    /**
     * The description of the disk(s) on the server.
     */
    readonly disk?: pulumi.Input<string>;
    /**
     * Whether the server has IPv6 networking activated.
     */
    readonly enableIpv6?: pulumi.Input<boolean>;
    /**
     * Whether the server has private networking support enabled.
     */
    readonly enablePrivateNetwork?: pulumi.Input<boolean>;
    /**
     * The ID of the firewall group to assign to the server.
     */
    readonly firewallGroupId?: pulumi.Input<string>;
    /**
     * The server's IPv4 gateway.
     */
    readonly gatewayV4?: pulumi.Input<string>;
    /**
     * The hostname to assign to the server.
     */
    readonly hostname?: pulumi.Input<string>;
    /**
     * The server's internal IP address.
     */
    readonly internalIp?: pulumi.Input<string>;
    /**
     * The ID of the ISO file to be installed on the server.
     */
    readonly isoId?: pulumi.Input<number>;
    /**
     * The server's current KVM URL. This URL will change periodically. It is not advised to cache this value.
     */
    readonly kvmUrl?: pulumi.Input<string>;
    /**
     * A label for the server.
     */
    readonly label?: pulumi.Input<string>;
    /**
     * The physical location of the server.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The server's main IP address.
     */
    readonly mainIp?: pulumi.Input<string>;
    /**
     * The server's IPv4 netmask.
     */
    readonly netmaskV4?: pulumi.Input<string>;
    /**
     * A list of private network IDs to be attached to the server.
     */
    readonly networkIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly networkIps?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly networkMacs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether an activation email will be sent when the server is ready.
     */
    readonly notifyActivate?: pulumi.Input<boolean>;
    /**
     * The string description of the operating system installed on the server.
     */
    readonly os?: pulumi.Input<string>;
    /**
     * The ID of the operating system to be installed on the server.
     */
    readonly osId?: pulumi.Input<number>;
    /**
     * Charges pending for this server's subscription in USD.
     */
    readonly pendingCharges?: pulumi.Input<string>;
    /**
     * The ID of the plan that you want the server to subscribe to.
     */
    readonly planId?: pulumi.Input<number>;
    /**
     * Whether the server is powered on or not.
     */
    readonly powerStatus?: pulumi.Input<string>;
    /**
     * The amount of memory available on the server in MB.
     */
    readonly ram?: pulumi.Input<string>;
    /**
     * The ID of the region that the server is to be created in.
     */
    readonly regionId?: pulumi.Input<number>;
    /**
     * IP address of the floating IP to use as the main IP of this server.
     */
    readonly reservedIp?: pulumi.Input<string>;
    /**
     * The ID of the startup script you want added to the server.
     */
    readonly scriptId?: pulumi.Input<string>;
    /**
     * A more detailed server status (none, locked, installingbooting, isomounting, ok).
     */
    readonly serverState?: pulumi.Input<string>;
    /**
     * The ID of the Vultr snapshot that the server will restore for the initial installation. 
     */
    readonly snapshotId?: pulumi.Input<string>;
    /**
     * A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).
     */
    readonly sshKeyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status of the server's subscription.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * The tag to assign to the server.
     */
    readonly tag?: pulumi.Input<string>;
    /**
     * Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.
     */
    readonly userData?: pulumi.Input<string>;
    /**
     * A list of the server's IPv6 networks.
     */
    readonly v6Networks?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
    /**
     * The number of virtual CPUs available on the server.
     */
    readonly vpsCpuCount?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * The ID of the Vultr application to be installed on the server.
     */
    readonly appId?: pulumi.Input<number>;
    /**
     * Whether automatic backups will be enabled for this server (these have an extra charge associated with them).
     */
    readonly autoBackup?: pulumi.Input<boolean>;
    /**
     * Whether DDOS protection will be enabled on the server (there is an additional charge for this).
     */
    readonly ddosProtection?: pulumi.Input<boolean>;
    /**
     * Whether the server has IPv6 networking activated.
     */
    readonly enableIpv6?: pulumi.Input<boolean>;
    /**
     * Whether the server has private networking support enabled.
     */
    readonly enablePrivateNetwork?: pulumi.Input<boolean>;
    /**
     * The ID of the firewall group to assign to the server.
     */
    readonly firewallGroupId?: pulumi.Input<string>;
    /**
     * The hostname to assign to the server.
     */
    readonly hostname?: pulumi.Input<string>;
    /**
     * The ID of the ISO file to be installed on the server.
     */
    readonly isoId?: pulumi.Input<number>;
    /**
     * A label for the server.
     */
    readonly label?: pulumi.Input<string>;
    /**
     * A list of private network IDs to be attached to the server.
     */
    readonly networkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether an activation email will be sent when the server is ready.
     */
    readonly notifyActivate?: pulumi.Input<boolean>;
    /**
     * The ID of the operating system to be installed on the server.
     */
    readonly osId?: pulumi.Input<number>;
    /**
     * The ID of the plan that you want the server to subscribe to.
     */
    readonly planId: pulumi.Input<number>;
    /**
     * The ID of the region that the server is to be created in.
     */
    readonly regionId: pulumi.Input<number>;
    /**
     * IP address of the floating IP to use as the main IP of this server.
     */
    readonly reservedIp?: pulumi.Input<string>;
    /**
     * The ID of the startup script you want added to the server.
     */
    readonly scriptId?: pulumi.Input<string>;
    /**
     * The ID of the Vultr snapshot that the server will restore for the initial installation. 
     */
    readonly snapshotId?: pulumi.Input<string>;
    /**
     * A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).
     */
    readonly sshKeyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tag to assign to the server.
     */
    readonly tag?: pulumi.Input<string>;
    /**
     * Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.
     */
    readonly userData?: pulumi.Input<string>;
}
