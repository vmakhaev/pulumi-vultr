// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Vultr reserved IP resource. This can be used to create, read, modify, and delete reserved IP addresses on your Vultr account.
 * 
 * ## Example Usage
 * 
 * 
 * 
 * ```typescript
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-vultr/blob/master/website/docs/r/reserved_ip.html.markdown.
 */
export class ReservedIP extends pulumi.CustomResource {
    /**
     * Get an existing ReservedIP resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReservedIPState, opts?: pulumi.CustomResourceOptions): ReservedIP {
        return new ReservedIP(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vultr:index/reservedIP:ReservedIP';

    /**
     * Returns true if the given object is an instance of ReservedIP.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReservedIP {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReservedIP.__pulumiType;
    }

    /**
     * The VPS ID you want this reserved IP to be attached to.
     */
    public readonly attachedId!: pulumi.Output<string>;
    /**
     * The type of reserved IP that you want. Either "v4" or "v6".
     */
    public readonly ipType!: pulumi.Output<string>;
    /**
     * The label you want to give your reserved IP.
     */
    public readonly label!: pulumi.Output<string | undefined>;
    /**
     * The region ID that you want the reserved IP to be created in.
     */
    public readonly regionId!: pulumi.Output<number>;
    /**
     * The reserved IP's subnet.
     */
    public /*out*/ readonly subnet!: pulumi.Output<string>;
    /**
     * The reserved IP's subnet size.
     */
    public /*out*/ readonly subnetSize!: pulumi.Output<number>;

    /**
     * Create a ReservedIP resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReservedIPArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReservedIPArgs | ReservedIPState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ReservedIPState | undefined;
            inputs["attachedId"] = state ? state.attachedId : undefined;
            inputs["ipType"] = state ? state.ipType : undefined;
            inputs["label"] = state ? state.label : undefined;
            inputs["regionId"] = state ? state.regionId : undefined;
            inputs["subnet"] = state ? state.subnet : undefined;
            inputs["subnetSize"] = state ? state.subnetSize : undefined;
        } else {
            const args = argsOrState as ReservedIPArgs | undefined;
            if (!args || args.ipType === undefined) {
                throw new Error("Missing required property 'ipType'");
            }
            if (!args || args.regionId === undefined) {
                throw new Error("Missing required property 'regionId'");
            }
            inputs["attachedId"] = args ? args.attachedId : undefined;
            inputs["ipType"] = args ? args.ipType : undefined;
            inputs["label"] = args ? args.label : undefined;
            inputs["regionId"] = args ? args.regionId : undefined;
            inputs["subnet"] = undefined /*out*/;
            inputs["subnetSize"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ReservedIP.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReservedIP resources.
 */
export interface ReservedIPState {
    /**
     * The VPS ID you want this reserved IP to be attached to.
     */
    readonly attachedId?: pulumi.Input<string>;
    /**
     * The type of reserved IP that you want. Either "v4" or "v6".
     */
    readonly ipType?: pulumi.Input<string>;
    /**
     * The label you want to give your reserved IP.
     */
    readonly label?: pulumi.Input<string>;
    /**
     * The region ID that you want the reserved IP to be created in.
     */
    readonly regionId?: pulumi.Input<number>;
    /**
     * The reserved IP's subnet.
     */
    readonly subnet?: pulumi.Input<string>;
    /**
     * The reserved IP's subnet size.
     */
    readonly subnetSize?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ReservedIP resource.
 */
export interface ReservedIPArgs {
    /**
     * The VPS ID you want this reserved IP to be attached to.
     */
    readonly attachedId?: pulumi.Input<string>;
    /**
     * The type of reserved IP that you want. Either "v4" or "v6".
     */
    readonly ipType: pulumi.Input<string>;
    /**
     * The label you want to give your reserved IP.
     */
    readonly label?: pulumi.Input<string>;
    /**
     * The region ID that you want the reserved IP to be created in.
     */
    readonly regionId: pulumi.Input<number>;
}
